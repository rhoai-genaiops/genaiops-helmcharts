apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: guidellm-task
spec:
  description: "Run guidellm benchmark against an endpoint and extract results"
  workspaces:
    - name: shared-workspace
      description: "Shared workspace for storing benchmark results"
  params:
    - name: BASE_URL
      type: string
      description: "Base URL of the target service"
      default: "http://canopy-backend"
    - name: ENDPOINT_PATH
      type: string
      description: "Endpoint path to append to base URL"
      default: "/summarize"
    - name: MODEL_NAME
      type: string
      description: "Model name identifier (use canopy_ prefix for Canopy support)"
      default: "canopy_custom"
    - name: PROCESSOR
      type: string
      description: "Processor/model path for tokenization"
      default: "RedHatAI/Llama-3.2-3B-Instruct-quantized.w8a8"
    - name: DATA_CONFIG
      type: string
      description: "Data configuration JSON"
      default: '{"type":"emulated","prompt_tokens":512,"output_tokens":128}'
    - name: OUTPUT_FILENAME
      type: string
      description: "Output filename"
      default: "benchmark-results.yaml"
    - name: RATE_TYPE
      type: string
      description: "Rate type for benchmark"
      default: "synchronous"
    - name: MAX_SECONDS
      type: string
      description: "Maximum benchmark duration in seconds"
      default: "1800"
    - name: MAX_REQUESTS
      type: string
      description: "Maximum number of requests to send"
      default: "5"
    - name: GUIDELLM_IMAGE
      type: string
      description: "Guidellm container image"
      default: "quay.io/rhoai-genaiops/guidellm:v2"
  steps:
    - name: run-benchmark
      image: "$(params.GUIDELLM_IMAGE)"
      command: ["guidellm"]
      args:
        - "benchmark"
        - "--target=$(params.BASE_URL)$(params.ENDPOINT_PATH)"
        - "--model=$(params.MODEL_NAME)"
        - "--processor=$(params.PROCESSOR)"
        - "--backend-type=openai_http"
        - "--data=$(params.DATA_CONFIG)"
        - "--output-path=$(workspaces.shared-workspace.path)/$(params.OUTPUT_FILENAME)"
        - "--rate-type=$(params.RATE_TYPE)"
        - "--max-seconds=$(params.MAX_SECONDS)"
        - "--max-requests=$(params.MAX_REQUESTS)"
    - name: extract-results
      image: "registry.access.redhat.com/ubi9/ubi"
      workingDir: "$(workspaces.shared-workspace.path)"
      script: |
        #!/bin/bash
        set -e
        
        echo "Extracting and organizing benchmark results..."
        
        # Create timestamped directory
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        RESULT_DIR="$(params.MODEL_NAME)_${TIMESTAMP}"
        mkdir -p $RESULT_DIR
        
        # Copy and organize results
        if [ -f "$(params.OUTPUT_FILENAME)" ]; then
          cp "$(params.OUTPUT_FILENAME)" "$RESULT_DIR/"

          # Create summary info
          cat > "$RESULT_DIR/benchmark_info.txt" << EOF
        Model: $(params.MODEL_NAME)
        Target: $(params.BASE_URL)$(params.ENDPOINT_PATH)
        Processor: $(params.PROCESSOR)
        Data Config: $(params.DATA_CONFIG)
        Rate Type: $(params.RATE_TYPE)
        Max Seconds: $(params.MAX_SECONDS)
        Timestamp: $TIMESTAMP
        EOF
          
          # Package results
          tar czf "${RESULT_DIR}.tar.gz" "$RESULT_DIR"
          echo "Results packaged to: ${RESULT_DIR}.tar.gz"
          echo "Contents of workspace:"
          ls -la
        else
          echo "ERROR: Benchmark output file not found: $(params.OUTPUT_FILENAME)"
          exit 1
        fi